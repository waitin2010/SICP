;;;;;;;symblo-differentition
(define (deriv exp var)
  (cond ((number? exp) 0)
	((variable? exp)
	 (if (same-variable? exp var) 1 0))
	((sum? exp)
	 (make-sum (deriv (addend exp) var)
		   (deriv (augend exp) var)))
	((product? exp)
	 (make-sum
	  (make-product (multiplier exp)
			(deriv (multiplicand exp) var))
	  (make-product (deriv (multiplier exp) var)
			(multiplicand exp))))
	((exponentiation? exp)
	 (make-product (exponent exp)
		      (make-product (make-exponentiation (base exp) (- (exponent exp ) 1))
		       (deriv (base exp) var))))
	(else
	 (error "unkown expression type--DERIV" exp))))

(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (=number? exp num)
  (and (number? exp) (= exp num)))

(define (sum? x)
  (and (pair? x) (eq? (car x) '+)))
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
	((=number? a2 0) a1)
	((and (number? a1) (number? a2)) (+ a1 a2))
	((and (pair? a2) (not (product? a2))(not (sum? a2))) (append (list '+ a1) a2))
	(else (list '+ a1 a2))))
(define (addend s) (cadr s))
(define (augend s) 
  (let ((item (cddr s)))
    (cond ((not (null? (cdr item))) (make-sum (car item) (cdr item)))
	  (else (car item)))))

(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
	((=number? m1 1) m2)
	((=number? m2 1) m1)
	((and (number? m1) (number? m2)) (* m1 m2))
	((and (pair? m2)(not (sum? m2))) (append (list '* m1) m2))
	(else (list '* m1 m2))))

(define (product? x)
  (and (pair? x) (eq? (car x) '*)))
(define (multiplier p) (cadr p))
(define (multiplicand p)
  (let ((item (cddr p)))
    (cond ((not (null? (cdr item))) (make-product (car item) (cdr item)))
	  (else (car item)))))


(define (make-exponentiation b e)
  (cond ((or (=number? b 0) (=number? e 0)) 1)
	((and (number? b) (number? e)) (** b e))
	(else (list '** b e))))
(define (exponentiation? exp)
  (and (pair? exp) (eq? (car exp) '**)))
(define (base ex)
  (cadr ex))
(define (exponent ex)
  (caddr ex))
;;test for deriv function
(deriv '(+ x 3) 'x)
;Answer: (+ 1 0)
(deriv '(* x y) 'x)
;Answer: (+ (* x 0) (* 1 y))
(deriv '(* (* x y) (+ x 3)) 'x)
;Answer: (+ (* (* x y) (+ 1 0))
;           (* (+ (* x 0) (* 1 y))
;              (+ x 3)))
