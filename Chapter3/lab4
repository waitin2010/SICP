okay
STk> (define brian (instantiate person 'brain))
brian
STk> (ask brian 'repeat)
*** Error:
    unbound variable: stuff
Current eval stack:
__________________
  0    stuff
STk> 
(define-class (person name)
  (Instance-var (sent '()))
  (method (say stuff) (set! sent stuff) sent)
  (method (ask stuff) (ask self 'say (se '(would you please) stuff)))
  (method (greet) (ask self 'say (se '(hello my name is) name))) 
  (method (repeat) sent))
person
STk> 


(define brian (instantiate person 'brain))
brian
STk> (aks brian 'repeat)
*** Error:
    unbound variable: aks
Current eval stack:
__________________
  0    (aks brian (quote repeat))
STk> (ask brian 'repeat)
*** Error:
    unbound variable: sent
Current eval stack:
__________________
  0    sent
STk> (ask brian 'say '(hello))
*** Error:
    set!: variable not defined: sent
Current eval stack:
__________________
  0    (set! sent stuff)
  1    (apply method args)
STk> (load "lab4")
*** Error at line 1 of file ./lab4:
    unbound variable: okay
Current eval stack:
__________________
  0    okay
  1    (load "lab4")
STk> (load "lab4.scm")
okay
STk> (define biran (instantiate person 'brain))
biran
STk> (ask brian 'repeat)
*** Error:
    unbound variable: sent
Current eval stack:
__________________
  0    sent
STk> 
(define-class (person name)
  (instance-vars (sent '()))
  (method (say stuff) (set! sent stuff) sent)
  (method (ask stuff) (ask self 'say (se '(would you please) stuff)))
  (method (greet) (ask self 'say (se '(hello my name is) name))) 
  (method (repeat) (lambda () sent)))
person
STk> 


(define biran (instantiate person 'brain))
biran
STk> (ask brian 'repeat)
*** Error:
    unbound variable: sent
Current eval stack:
__________________
  0    sent
STk> 
(define-class (person name)
  (instance-vars (sent '()))
  (method (say stuff) (set! sent stuff) sent)
  (method (ask stuff) (ask self 'say (se '(would you please) stuff)))
  (method (greet) (ask self 'say (se '(hello my name is) name))) 
  (method (repeat) ((lambda (x) x) sent)))
person
STk> 


(define biran (instantiate person 'brain))
biran
STk> (ask brian 'repeat)
*** Error:
    unbound variable: sent
Current eval stack:
__________________
  0    sent
STk> (ask brian 'say '(hello))
*** Error:
    set!: variable not defined: sent
Current eval stack:
__________________
  0    (set! sent stuff)
  1    (apply method args)
STk> 
(define-class (person name)
  (instance-vars (sent 'a))
  (method (say stuff) (set! sent stuff) sent)
  (method (ask stuff) (ask self 'say (se '(would you please) stuff)))
  (method (greet) (ask self 'say (se '(hello my name is) name))) 
  (method (repeat) ((lambda (x) x) sent)))
person
STk> 


(define brian (instantiate person 'brian))
brian
STk> (aks brian 'say '(hello))
*** Error:
    unbound variable: aks
Current eval stack:
__________________
  0    (aks brian (quote say) (quote (hello)))
STk> (ask brian 'say '(hello))
(hello)
STk> (aks brian 'repeat)
*** Error:
    unbound variable: aks
Current eval stack:
__________________
  0    (aks brian (quote repeat))
STk> (ask birna 'repeat)
*** Error:
    unbound variable: birna
Current eval stack:
__________________
  0    (ask birna (quote repeat))
STk> (ask brian 'repeat)
(hello)
STk> (ask brian 'ask '(close the door))
(would you please close the door)
STk> (ask brian 'repeat)
(would you please close the door)
STk> (define c (instantiate person 'c))
c
STk> (ask c 'repeat)
a
STk> 
(define-class (person name)
  (instance-vars (sent '()))
  (method (say stuff) (set! sent stuff) sent)
  (method (ask stuff) (ask self 'say (se '(would you please) stuff)))
  (method (greet) (ask self 'say (se '(hello my name is) name))) 
  (method (repeat) ((lambda (x) x) sent)))
person
STk> 


(define brian (instantiate person 'brian))
brian
STk> (ask brian 'repeat)
()
STk> 
(define-class (person name)
  (instance-vars (sent '()))
  (method (say stuff) (set! sent stuff) sent)
  (method (ask stuff) (ask self 'say (se '(would you please) stuff)))
  (method (greet) (ask self 'say (se '(hello my name is) name))) 
  (method (repeat) sent))
person
STk> (define brian (instantiate person 'brian))
brian
STk> (ask brian 'repeat)
()
STk> (ask brian 'say '(hello))
(hello)
STk> (ask brian 'repeat)
(hello)
STk> (ask brian 'ask '(close the door))
(would you please close the door)
STk> (ask brian 'repeat)
(would you please close the door)
STk> (ask brian 'greet)
(hello my name is brian)
STk> (ask brian 'repeat)
(hello my name is brian)
STk> (define-class (double-talker name)
  (parent (person name))
  (method (say stuff) (se (usual 'say stuff) (ask self 'repeat))))
double-talker
STk>  


(define-class (double-talker name)
  (parent (person name))
  (method (say stuff) (se stuff stuff)))
double-talker
STk> 

(define-class (double-talker name)
  (parent (person name))
  (method (say stuff) (usual 'say (se stuff stuff))))
double-talker
STk> 



(define mike (instantiate double-talker 'mike))
mike
STk> (ask mike 'say '(hello))
(hello hello)
STk> ;(hello hello)
(ask mike 'say '(the sky is falling))
(the sky is falling the sky is falling)
STk> 
(ask mike 'repeat)
(the sky is falling the sky is falling)
STk> (define-class (double-talker name)
  (parent (person name))
  (method (say stuff) (se (usual 'say stuff) (ask self 'repeat))))
double-talker
STk>  
(define mike (instantiate double-talker 'mike))
mike
STk> (ask mike 'say '(hello))
(hello hello)
STk> ;(hello hello)
(ask mike 'say '(the sky is falling))
(the sky is falling the sky is falling)
STk> 
(ask mike 'repeat)
(the sky is falling)
STk> (define-class (double-talker name)
  (parent (person name))
  (method (say stuff) (se stuff stuff)))
double-talker
STk> 
(define mike (instantiate double-talker 'mike))
mike
STk> (ask mike 'say '(hello))
(hello hello)
STk> ;(hello hello)
(ask mike 'say '(the sky is falling))
(the sky is falling the sky is falling)
STk> 
(ask mike 'repeat)
()
STk> (define (make-count init-amount)
  (let ((balance init-amount))
    (define (with-draw amount)
      (set! balance (- balance amount)) balance)
    (define (deposit amount)
      (set! balance (+ balance amount)) balance)
    (define (dispatch m)
      (cond ((eq? m 'withdraw) withdraw)
	    ((eq? m 'deposit) deposit)))
    dispatch))
make-count
STk> 
;test for make-count function
(define c1 (make-count 100))
c1
STk> 
((c1 'with-draw) 10)
*** Error:
    eval: bad function in : ((c1 (quote with-draw)) 10)
Current eval stack:
__________________
  0    ((c1 (quote with-draw)) 10)
STk> ((c1 'deposit) 10)
110
STk> (define (make-count init-amount)
  (let ((balance init-amount))
    (define (withdraw amount)

      (set! balance (- balance amount)) balance)
    (define (deposit amount)
      (set! balance (+ balance amount)) balance)
    (define (dispatch m)
      (cond ((eq? m 'withdraw) withdraw)
	    ((eq? m 'deposit) deposit)))
    dispatch))
make-count
STk> 
;test for make-count function
(define c1 (make-count 100))
c1
STk> 
((c1 'with-draw) 10)
*** Error:
    eval: bad function in : ((c1 (quote with-draw)) 10)
Current eval stack:
__________________
  0    ((c1 (quote with-draw)) 10)
STk> ((c1 'deposit) 10)
110
STk> (define (make-count init-amount)
  (let ((balance init-amount))
    (define (withdraw amount)
      (set! balance (- balance amount)) balance)
    (define (deposit amount)
      (set! balance (+ balance amount)) balance)
    (define (dispatch m)
      (cond ((eq? m 'withdraw) withdraw)
	    ((eq? m 'deposit) deposit)
	    ((eq? m 'balance) balance)
	    ((eq? m 'init-balance) init-amount)))
    dispatch))
make-count
STk> 
;test for make-count function
(define c1 (make-count 100))
c1
STk> 
((c1 'withdraw) 10)
90
STk> ((c1 'deposit) 10)
100
STk> (c1 'balance)
100
STk> (c1 'init-balance)
100
STk> (define (make-count init-amount)
  (let ((balance init-amount)
	(transaction '()))
    (define (withdraw amount)
      (cons (cons 'withdraw amount)
	    transaction)
      (set! balance (- balance amount)) balance)
    (define (deposit amount)
      (cons (cons 'withdraw amount)
	    transaction)
      (set! balance (+ balance amount)) balance)
    (define (dispatch m)
      (cond ((eq? m 'withdraw) withdraw)
	    ((eq? m 'deposit) deposit)
	    ((eq? m 'balance) balance)
	    ((eq? m 'init-balance) init-amount)
	    ((eq? m 'transactions) transaction)))
    dispatch))
make-count
STk> 
;test for make-count function
(define c1 (make-count 100))
c1
STk> 
((c1 'withdraw) 10)
90
STk> ((c1 'deposit) 10)
100
STk> (c1 'balance)
100
STk> (c1 'init-balance)
100
STk> (c1 'transactions)
()
STk> (define (make-count init-amount)
  (let ((balance init-amount)
	(transaction '()))
    (define (withdraw amount)
      (set! transaction
	    (cons (cons 'withdraw amount)
		  transaction)
      (set! balance (- balance amount)) balance)
    (define (deposit amount)
      (set! transaction
	    (cons (cons 'withdraw amount)
		  transaction)
      (set! balance (+ balance amount)) balance)
    (define (dispatch m)
      (cond ((eq? m 'withdraw) withdraw)
	    ((eq? m 'deposit) deposit)
	    ((eq? m 'balance) balance)
	    ((eq? m 'init-balance) init-amount)
	    ((eq? m 'transactions) transaction)))
    dispatch))

;test for make-count function
(define c1 (make-count 100))

((c1 'withdraw) 10)
((c1 'deposit) 10)
(c1 'balance)
(c1 'init-balance)
(c1 'transactions)

)
)
make-count
STk> (define (make-count init-amount)
  (let ((balance init-amount)
	(transaction '()))
    (define (withdraw amount)
      (set! transaction
	    (cons (cons 'withdraw amount)
		  transaction))
      (set! balance (- balance amount)) balance)
    (define (deposit amount)
      (set! transaction
	    (cons (cons 'withdraw amount)
		  transaction))
      (set! balance (+ balance amount)) balance)
    (define (dispatch m)
      (cond ((eq? m 'withdraw) withdraw)
	    ((eq? m 'deposit) deposit)
	    ((eq? m 'balance) balance)
	    ((eq? m 'init-balance) init-amount)
	    ((eq? m 'transactions) transaction)))
    dispatch))
make-count
STk> 
;test for make-count function
(define c1 (make-count 100))
c1
STk> 
((c1 'withdraw) 10)
90
STk> ((c1 'deposit) 10)
100
STk> (c1 'balance)
100
STk> (c1 'init-balance)
100
STk> (c1 'transactions)
((withdraw . 10) (withdraw . 10))
STk> 
(define (make-count init-amount)
  (let ((balance init-amount)
	(transaction '()))
    (define (withdraw amount)
      (set! transaction
	    (cons (cons 'withdraw amount)
		  transaction))
      (set! balance (- balance amount)) balance)
    (define (deposit amount)
      (set! transaction
	    (cons (cons 'deposit amount)
		  transaction))
      (set! balance (+ balance amount)) balance)
    (define (dispatch m)
      (cond ((eq? m 'withdraw) withdraw)
	    ((eq? m 'deposit) deposit)
	    ((eq? m 'balance) balance)
	    ((eq? m 'init-balance) init-amount)
	    ((eq? m 'transactions) transaction)))
    dispatch))
make-count
STk> 
;test for make-count function
(define c1 (make-count 100))
c1
STk> 
((c1 'withdraw) 10)
90
STk> ((c1 'deposit) 10)
100
STk> (c1 'balance)
100
STk> (c1 'init-balance)
100
STk> (c1 'transactions)
((deposit . 10) (withdraw . 10))
STk> 
(define (plus1 var)
  (set! var (+ var 1))
  var)
plus1
STk> 
(plus1 5)
6
STk> ;6
(define (plus1 var)
  (set! var (+ var 1))
  var)
plus1
STk> 
(plus1 5)
6
STk> ;6

(define (make-adder n)
  (lambda (x) (+ x n)))
make-adder
STk> 
(make-adder 3)
#[closure arglist=(x) b7372214]
STk> ;return function
((make-adder 3) 5)
8
STk> ;8

(define (f x) (make-adder 3))
f
STk> (f 5)
#[closure arglist=(x) b7370a98]
STk> ;return function

(define g (make-adder 3))
g
STk> (g 5)
8
STk>  ;8
(define (make-funny-adder n)
  (lambda (x)
    (if (equal? x 'new)
	(set! n (+ n 1))
	(+ x n))))
make-funny-adder
STk> (define h (make-funny-adder 3))
h
STk> ;function h
(define j (make-funny-adder 7))
j
STk> ;function j
(h 5)
8
STk> ;8
(h 5)
8
STk> ;8
(h 'new)
okay
STk> ;4
(h 5)
9
STk> ;9
(j 5)
12
STk> ;8
(let ((a 3))
  (+ 5 a))
8
STk> ;8

(let ((a 3))
  (lambda (x) (+ x a)))
#[closure arglist=(x) b736a3d8]
STk> ;function

((let ((a 3))
   (lambda (x) (+ x a)))
 5)
8
STk> ;8
(define s 
  (let ((a 3))
    (lambda (msg)
      (cond ((equal? msg 'new)
	     (lambda ()
	       (set! a (+ a 1))))
	    ((equal? msg 'add)
	     (lambda (x) (+ x a)))
	    (else (error "hum?"))))))
s
STk> 
(s 'add)
#[closure arglist=(x) b7368524]
STk> ;f
(s 'add 5)
*** Error:
    too many arguments to: (s (quote add) 5)
Current eval stack:
__________________
  0    (s (quote add) 5)
STk> ;hum?
((s 'add) 5)
8
STk> ;8
(s 'new)
#[closure arglist=() b73667a8]
STk> ;okay, a=4
((s 'add) 5)
8
STk> ;9
((s 'new))
okay
STk> ;error info, but a = 5
((s 'add) 5)
9
STk> ;10
(s 'add)
#[closure arglist=(x) b7363850]
STk> (s 'add 5)
*** Error:
    too many arguments to: (s (quote add) 5)
Current eval stack:
__________________
  0    (s (quote add) 5)
STk> (s 'new)
#[closure arglist=() b7361ed0]
STk> ((lambda (x)
   (let ((a 3))
     (+ x a)))
 5)
8
STk> ;8

(define k 
  (let ((a 3))
    (lambda (x) (+ x a))))
k
STk> 
(k 5)
8
STk> ;8

(define m 
  (lambda (x)
    (let ((a 3))
      (+ x a))))
m
STk> (m 5)
8
STk> ;8

(define p 
  (let ((a 3))
    (lambda (x)
      (if (equal? x 'new)
	  (set! a (+ a 1))
	  (+ x a)))))
p
STk> 
(p 5)
8
STk> ;8
(p 5)
8
STk> ;8
(p 'new)
okay
STk> ;okay
(p 5)
9
STk> ;9
(define r
  (lambda (x)
    (let ((a 3))
      (if (equal? x 'new)
	  (set! a (+ a 1))
	  (+ x a)))))
r
STk> 
(r 5)
8
STk> ;8
(r 5)
8
STk> ;8
(r 'new)
okay
STk> ;okay
(r 5)
8
STk> ;8

(define (ask obj msg .args)
  (apply (obj msg) args))
ask
STk> 
(ask s 'add 5)
*** Error:
    unbound variable: args
Current eval stack:
__________________
  0    (apply (obj msg) args)
STk> (ask s 'add 5)
*** Error:
    unbound variable: args
Current eval stack:
__________________
  0    (apply (obj msg) args)
STk> ask

#[closure arglist=(obj msg .args) b7358f90]
STk> STk> 
*** Error:
    unbound variable: stk>
Current eval stack:
__________________
  0    stk>
STk> *** 
*** Error:
    unbound variable: ***
Current eval stack:
__________________
  0    ***
STk> Error:
*** Error:
    unbound variable: error:
Current eval stack:
__________________
  0    error:
STk>     unbound 
*** Error:
    unbound variable: unbound
Current eval stack:
__________________
  0    unbound
STk> variable: 
*** Error:
    unbound variable: variable:
Current eval stack:
__________________
  0    variable:
STk> args
*** Error:
    unbound variable: args
Current eval stack:
__________________
  0    args
STk> Current 
*** Error:
    unbound variable: current
Current eval stack:
__________________
  0    current
STk> eval 
#[subr eval]
STk> stack:
*** Error:
    unbound variable: stack:
Current eval stack:
__________________
  0    stack:
STk> __________________
*** Error:
    unbound variable: __________________
Current eval stack:
__________________
  0    __________________
STk>   0 
0
STk>    (apply (obj msg) args)
*** Error:
    unbound variable: obj
Current eval stack:
__________________
  0    (obj msg)
  1    (apply (obj msg) args)
STk> STk> 
*** Error:
    unbound variable: stk>
Current eval stack:
__________________
  0    stk>
STk> (define answer 0)
answer
STk> (define (square  f x)
  (let ((answer 0))
    (f x) answer))
square
STk> (square (lambda (n) (set! answer (* n n))) 3)
0
STk> answer

9
STk> (define count  (lambda ()
    ((lambda (counter)
       (set! counter (+ counter 1)) counter) 0)))
count
STk> (count)
1
STk> (count)
1
STk> (count)
1
STk> (define make-counter
  (lambda ()
    ((lambda (counter)
       (lambda ()
	 (set! counter (+ counter 1)) counter)) 0)))
make-counter
STk> 
(define counter1 (make-counter))
counter1
STk> (define counter2 (make-counter))
counter2
STk> 
(counter1)
1
STk> (counter1)
2
STk> (counter2)
1
STk> (counter1)
3
STk> (define make-counter 
  ((lambda (total-counter)
     (lambda (initial)
       (set! total-counter (+ total-counter initial))
       ((lambda (counter)
	  (lambda ()
	    (set! counter (+ counter 1))
	    (set! total-counter (+ total-counter 1))
	    counter)) initial))) 0))
make-counter
STk> 
(define counter1 (make-counter 2))
counter1
STk> (define counter2 (make-counter 3))
counter2
STk> 
(counter1)
3
STk> (counter1)
4
STk> (counter2)
4
STk> (counter1)
5
STk> 
(define (f + -)
  (+ ((lambda (-) (- 3 5)) -) 10))
f
STk> (f - +)
-2
STk> (define (hmm n)
  (lambda (x) (+ x y n)))
hmm
STk> (define (uhh y)
  (define hmm-y (hmm y))
  (hmm-y 2))
uhh
STk> (uhh 42)
*** Error:
    unbound variable: y
Current eval stack:
__________________
  0    (+ x y n)
STk> ((uhh 42) 2)
*** Error:
    unbound variable: y
Current eval stack:
__________________
  0    (+ x y n)
  1    ((uhh 42) 2)
STk> (define y 2)
y
STk> (uhh 42)
46
STk> (define answer 0)
answer
STk> (define (square f x)
  (let ((answer 0))
    (f x)
    answer))
square
STk> (square (lambda (n) (set! answer (* n n))) 3)
0
STk> answer

9
STk> (define a 3)
a
STk> ((lambda (a)
   ((lambda (a) (a))
    (lambda () (set! a 'myxomtosis)))
   a)
 (* a a))
myxomtosis
STk> a

3
STk> ((lambda (a)   ((lambda (a) (a))
    (lambda () (set! a 'myxomtosis)))
   a)
 (* a a))
myxomtosis
STk> a

3
STk> STk> 
*** Error:
    unbound variable: stk>
Current eval stack:
__________________
  0    stk>
STk> myxomtosis
*** Error:
    unbound variable: myxomtosis
Current eval stack:
__________________
  0    myxomtosis
STk> STk> 
*** Error:
    unbound variable: stk>
Current eval stack:
__________________
  0    stk>
STk> a
3
STk> 3
3
STk> STk> 
*** Error:
    unbound variable: stk>
Current eval stack:
__________________
  0    stk>
STk> (define a 'scatterbrain)
a
STk> ((lambda (a b) (b) a)
 a
 (let ((b 'cuttooth))
   (lambda () (set! a b))))
scatterbrain
STk> a

cuttooth
STk> (define (slow-op-maker op)  ((let ((old-result #f))
     (lambda (x)
       (let ((return old-result))
	 (set! old-result (op x))
	 return)))))
slow-op-maker
STk> (define square (lambda (x) (* x x)))
square
STk> (define cube (lambda (x) (* x x x)))
cube
STk> (define slow-sqr (slow-op-maker square))
*** Error:
    too few arguments to: ((let ((old-result #f)) (lambda (x) (let ((return old-result)) (set! old-result (op x)) return))))
Current eval stack:
__________________
  0    ((let ((old-result #f)) (lambda (x) (let ((return old-result)) (set! old-result (op x)) return))))
  1    (define slow-sqr (slow-op-maker square))
STk> (slow-sqr 3)
*** Error:
    unbound variable: slow-sqr
Current eval stack:
__________________
  0    (slow-sqr 3)
STk> (slow-sqr 5)
*** Error:
    unbound variable: slow-sqr
Current eval stack:
__________________
  0    (slow-sqr 5)
STk> 
(define slow-cube (slow-op-maker cube))
*** Error:
    too few arguments to: ((let ((old-result #f)) (lambda (x) (let ((return old-result)) (set! old-result (op x)) return))))
Current eval stack:
__________________
  0    ((let ((old-result #f)) (lambda (x) (let ((return old-result)) (set! old-result (op x)) return))))
  1    (define slow-cube (slow-op-maker cube))
STk> (slow-cube 3)
*** Error:
    unbound variable: slow-cube
Current eval stack:
__________________
  0    (slow-cube 3)
STk> (slow-cube 5)
*** Error:
    unbound variable: slow-cube
Current eval stack:
__________________
  0    (slow-cube 5)
STk> slow-sqr

*** Error:
    unbound variable: slow-sqr
Current eval stack:
__________________
  0    slow-sqr
STk> (square 2)
4
STk> (cube 3)
27
STk> (define slow-sqr (slow-op-maker square))
*** Error:
    too few arguments to: ((let ((old-result #f)) (lambda (x) (let ((return old-result)) (set! old-result (op x)) return))))
Current eval stack:
__________________
  0    ((let ((old-result #f)) (lambda (x) (let ((return old-result)) (set! old-result (op x)) return))))
  1    (define slow-sqr (slow-op-maker square))
STk> (define (slow-op-maker op)
  (let ((old-result #f))
     (lambda (x)
       (let ((return old-result))
	 (set! old-result (op x))
	 return))))
slow-op-maker
STk> )
read: unexpected close parenthesis
(define square (lambda (x) (* x x)))
square
STk> (define cube (lambda (x) (* x x x)))
cube
STk> (define slow-sqr (slow-op-maker square))
slow-sqr
STk> (slow-sqr 3)
#f
STk> (slow-sqr 5)
9
STk> 
(define slow-cube (slow-op-maker cube))
slow-cube
STk> (slow-cube 3)
#f
STk> (slow-cube 5)
27
STk> (define slow-op-maker
  (let ((old-result #f))
    (lambda (op)
      (lambda (x)
	(let ((return old-result))
	  (set! old-result (op x))
	  return)))))
slow-op-maker
STk> (define square (lambda (x) (* x x)))
square
STk> (define cube (lambda (x) (* x x x)))
cube
STk> (define slow-sqr (slow-op-maker square))
slow-sqr
STk> (slow-sqr 3)
#f
STk> (slow-sqr 5)
9
STk> 
(define slow-cube (slow-op-maker cube))
slow-cube
STk> (slow-cube 3)
25
STk> (slow-cube 5)
27
STk> (slow-sqr 4)
125
STk> (define x 5)
x
STk> (parallel-execute (lambda () (set! x (+ x 10)))
		  (lambda () (set! x (+ x 20))))
still-running
STk> 
;answer: 35, 15, 25
(parallel-execute (lambda () (set! x (+ x 10)))
		  (lambda () (set! x (+ x 20))))
still-running
STk> 
(parallel-execute (lambda () (set! x (+ x 10)))
		  (lambda () (set! x (+ x 20))))
still-running
STk> 
still-running

*** Error:
    unbound variable: still-running
Current eval stack:
__________________
  0    still-running
STk> (paralle1-execute (lambda () (set! x (+ x 10)))		  (lambda () (set! x (+ x 20))))
*** Error:
    unbound variable: paralle1-execute
Current eval stack:
__________________
  0    (paralle1-execute (lambda () (set! x (+ x 10))) (lambda () (set! x (+ x 20))))
STk> (parallel-execute (lambda () (set! x (+ x 10)))
		  (lambda () (set! x (+ x 20))))
still-running
STk> 
parallel-excute

*** Error:
    unbound variable: parallel-excute
Current eval stack:
__________________
  0    parallel-excute
STk> parallel-excute
*** Error:
    unbound variable: parallel-excute
Current eval stack:
__________________
  0    parallel-excute
STk> 